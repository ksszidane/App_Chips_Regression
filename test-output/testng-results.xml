<?xml version="1.0" encoding="UTF-8"?>
<testng-results skipped="0" failed="1" ignored="0" total="13" passed="12">
  <reporter-output>
  </reporter-output>
  <suite name="ExtentReport" duration-ms="404070" started-at="2021-08-02T11:37:18 KST" finished-at="2021-08-02T11:44:02 KST">
    <groups>
    </groups>
    <test name="Test_Project" duration-ms="404070" started-at="2021-08-02T11:37:18 KST" finished-at="2021-08-02T11:44:02 KST">
      <class name="Chips_001_기본기능.기본기능_02_홈화면최초진입">
        <test-method status="PASS" signature="setupClass(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)[pri:0, instance:Chips_001_기본기능.기본기능_02_홈화면최초진입@1d548a08]" name="setupClass" is-config="true" duration-ms="21354" started-at="2021-08-02T11:41:24 KST" finished-at="2021-08-02T11:41:45 KST">
          <params>
            <param index="0">
              <value>
                <![CDATA[Android]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[Chips]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[http://0.0.0.0:4723/wd/hub]]>
              </value>
            </param>
            <param index="3">
              <value>
                <![CDATA[RTG]]>
              </value>
            </param>
            <param index="4">
              <value>
                <![CDATA[Chips]]>
              </value>
            </param>
            <param index="5">
              <value>
                <![CDATA[in]]>
              </value>
            </param>
            <param index="6">
              <value>
                <![CDATA[ce06171633774e37027e]]>
              </value>
            </param>
            <param index="7">
              <value>
                <![CDATA[ALDF3NYA6C0D0C654DD2]]>
              </value>
            </param>
            <param index="8">
              <value>
                <![CDATA[ALDF5TR5SNGZ8175DA16]]>
              </value>
            </param>
            <param index="9">
              <value>
                <![CDATA[ALDFH3D1Q7W6071EFE41]]>
              </value>
            </param>
            <param index="10">
              <value>
                <![CDATA[ALDFHFMQC3RB935B4B02]]>
              </value>
            </param>
            <param index="11">
              <value>
                <![CDATA[ALDFHFMSG34WDF6CD40E]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setupClass -->
        <test-method status="PASS" signature="BeforeMethod(java.lang.reflect.Method)[pri:0, instance:Chips_001_기본기능.기본기능_02_홈화면최초진입@1d548a08]" name="BeforeMethod" is-config="true" duration-ms="0" started-at="2021-08-02T11:41:45 KST" finished-at="2021-08-02T11:41:45 KST">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void Chips_001_기본기능.기본기능_02_홈화면최초진입.TC_0000_앱실행과AccessToken얻기(java.lang.reflect.Method) throws java.lang.Exception]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- BeforeMethod -->
        <test-method status="PASS" signature="TC_0000_앱실행과AccessToken얻기(java.lang.reflect.Method)[pri:0, instance:Chips_001_기본기능.기본기능_02_홈화면최초진입@1d548a08]" name="TC_0000_앱실행과AccessToken얻기" duration-ms="29532" started-at="2021-08-02T11:41:45 KST" description="칩스 리그레이션 TC : 실행_0000" finished-at="2021-08-02T11:42:15 KST">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void Chips_001_기본기능.기본기능_02_홈화면최초진입.TC_0000_앱실행과AccessToken얻기(java.lang.reflect.Method) throws java.lang.Exception]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- TC_0000_앱실행과AccessToken얻기 -->
        <test-method status="PASS" signature="AfterMethod(org.testng.ITestResult)[pri:0, instance:Chips_001_기본기능.기본기능_02_홈화면최초진입@1d548a08]" name="AfterMethod" is-config="true" duration-ms="19" started-at="2021-08-02T11:42:15 KST" finished-at="2021-08-02T11:42:15 KST">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=TC_0000_앱실행과AccessToken얻기 status=SUCCESS method=기본기능_02_홈화면최초진입.TC_0000_앱실행과AccessToken얻기(java.lang.reflect.Method)[pri:0, instance:Chips_001_기본기능.기본기능_02_홈화면최초진입@1d548a08] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- AfterMethod -->
        <test-method status="PASS" signature="BeforeMethod(java.lang.reflect.Method)[pri:0, instance:Chips_001_기본기능.기본기능_02_홈화면최초진입@1d548a08]" name="BeforeMethod" is-config="true" duration-ms="0" started-at="2021-08-02T11:42:15 KST" finished-at="2021-08-02T11:42:15 KST">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void Chips_001_기본기능.기본기능_02_홈화면최초진입.TC_0138_홈화면최초진입확인(java.lang.reflect.Method) throws java.lang.Exception]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- BeforeMethod -->
        <test-method status="PASS" signature="TC_0138_홈화면최초진입확인(java.lang.reflect.Method)[pri:0, instance:Chips_001_기본기능.기본기능_02_홈화면최초진입@1d548a08]" name="TC_0138_홈화면최초진입확인" duration-ms="4127" started-at="2021-08-02T11:42:15 KST" description="칩스 리그레이션 TC : 실행_0138" finished-at="2021-08-02T11:42:19 KST">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void Chips_001_기본기능.기본기능_02_홈화면최초진입.TC_0138_홈화면최초진입확인(java.lang.reflect.Method) throws java.lang.Exception]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- TC_0138_홈화면최초진입확인 -->
        <test-method status="PASS" signature="AfterMethod(org.testng.ITestResult)[pri:0, instance:Chips_001_기본기능.기본기능_02_홈화면최초진입@1d548a08]" name="AfterMethod" is-config="true" duration-ms="17" started-at="2021-08-02T11:42:19 KST" finished-at="2021-08-02T11:42:19 KST">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=TC_0138_홈화면최초진입확인 status=SUCCESS method=기본기능_02_홈화면최초진입.TC_0138_홈화면최초진입확인(java.lang.reflect.Method)[pri:0, instance:Chips_001_기본기능.기본기능_02_홈화면최초진입@1d548a08] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- AfterMethod -->
        <test-method status="PASS" signature="tearDownClass(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)[pri:0, instance:Chips_001_기본기능.기본기능_02_홈화면최초진입@1d548a08]" name="tearDownClass" is-config="true" duration-ms="4257" started-at="2021-08-02T11:42:19 KST" finished-at="2021-08-02T11:42:23 KST">
          <params>
            <param index="0">
              <value>
                <![CDATA[RTG]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[Chips]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[in]]>
              </value>
            </param>
            <param index="3">
              <value>
                <![CDATA[ce06171633774e37027e]]>
              </value>
            </param>
            <param index="4">
              <value>
                <![CDATA[ALDF3NYA6C0D0C654DD2]]>
              </value>
            </param>
            <param index="5">
              <value>
                <![CDATA[ALDF5TR5SNGZ8175DA16]]>
              </value>
            </param>
            <param index="6">
              <value>
                <![CDATA[ALDFH3D1Q7W6071EFE41]]>
              </value>
            </param>
            <param index="7">
              <value>
                <![CDATA[ALDFHFMQC3RB935B4B02]]>
              </value>
            </param>
            <param index="8">
              <value>
                <![CDATA[ALDFHFMSG34WDF6CD40E]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- tearDownClass -->
      </class> <!-- Chips_001_기본기능.기본기능_02_홈화면최초진입 -->
      <class name="Chips_001_기본기능.기본기능_03_부가기능">
        <test-method status="PASS" signature="setupClass(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)[pri:0, instance:Chips_001_기본기능.기본기능_03_부가기능@16aa0a0a]" name="setupClass" is-config="true" duration-ms="23242" started-at="2021-08-02T11:42:23 KST" finished-at="2021-08-02T11:42:46 KST">
          <params>
            <param index="0">
              <value>
                <![CDATA[Android]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[Chips]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[http://0.0.0.0:4723/wd/hub]]>
              </value>
            </param>
            <param index="3">
              <value>
                <![CDATA[RTG]]>
              </value>
            </param>
            <param index="4">
              <value>
                <![CDATA[Chips]]>
              </value>
            </param>
            <param index="5">
              <value>
                <![CDATA[in]]>
              </value>
            </param>
            <param index="6">
              <value>
                <![CDATA[ce06171633774e37027e]]>
              </value>
            </param>
            <param index="7">
              <value>
                <![CDATA[ALDF3NYA6C0D0C654DD2]]>
              </value>
            </param>
            <param index="8">
              <value>
                <![CDATA[ALDF5TR5SNGZ8175DA16]]>
              </value>
            </param>
            <param index="9">
              <value>
                <![CDATA[ALDFH3D1Q7W6071EFE41]]>
              </value>
            </param>
            <param index="10">
              <value>
                <![CDATA[ALDFHFMQC3RB935B4B02]]>
              </value>
            </param>
            <param index="11">
              <value>
                <![CDATA[ALDFHFMSG34WDF6CD40E]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setupClass -->
        <test-method status="PASS" signature="BeforeMethod(java.lang.reflect.Method)[pri:0, instance:Chips_001_기본기능.기본기능_03_부가기능@16aa0a0a]" name="BeforeMethod" is-config="true" duration-ms="0" started-at="2021-08-02T11:42:46 KST" finished-at="2021-08-02T11:42:46 KST">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void Chips_001_기본기능.기본기능_03_부가기능.TC_0000_앱실행과AccessToken얻기(java.lang.reflect.Method) throws java.lang.Exception]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- BeforeMethod -->
        <test-method status="PASS" signature="TC_0000_앱실행과AccessToken얻기(java.lang.reflect.Method)[pri:0, instance:Chips_001_기본기능.기본기능_03_부가기능@16aa0a0a]" name="TC_0000_앱실행과AccessToken얻기" duration-ms="58106" started-at="2021-08-02T11:42:46 KST" description="칩스 리그레이션 TC : 실행_0000" finished-at="2021-08-02T11:43:44 KST">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void Chips_001_기본기능.기본기능_03_부가기능.TC_0000_앱실행과AccessToken얻기(java.lang.reflect.Method) throws java.lang.Exception]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- TC_0000_앱실행과AccessToken얻기 -->
        <test-method status="PASS" signature="AfterMethod(org.testng.ITestResult)[pri:0, instance:Chips_001_기본기능.기본기능_03_부가기능@16aa0a0a]" name="AfterMethod" is-config="true" duration-ms="18" started-at="2021-08-02T11:43:44 KST" finished-at="2021-08-02T11:43:44 KST">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=TC_0000_앱실행과AccessToken얻기 status=SUCCESS method=기본기능_03_부가기능.TC_0000_앱실행과AccessToken얻기(java.lang.reflect.Method)[pri:0, instance:Chips_001_기본기능.기본기능_03_부가기능@16aa0a0a] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- AfterMethod -->
        <test-method status="PASS" signature="BeforeMethod(java.lang.reflect.Method)[pri:0, instance:Chips_001_기본기능.기본기능_03_부가기능@16aa0a0a]" name="BeforeMethod" is-config="true" duration-ms="0" started-at="2021-08-02T11:43:44 KST" finished-at="2021-08-02T11:43:44 KST">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void Chips_001_기본기능.기본기능_03_부가기능.TC_0145_미디어재생중_infoPlay실행(java.lang.reflect.Method) throws java.lang.Exception]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- BeforeMethod -->
        <test-method status="FAIL" signature="TC_0145_미디어재생중_infoPlay실행(java.lang.reflect.Method)[pri:0, instance:Chips_001_기본기능.기본기능_03_부가기능@16aa0a0a]" name="TC_0145_미디어재생중_infoPlay실행" duration-ms="17436" started-at="2021-08-02T11:43:44 KST" description="칩스 리그레이션 TC : 실행_0145" finished-at="2021-08-02T11:44:02 KST">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void Chips_001_기본기능.기본기능_03_부가기능.TC_0145_미디어재생중_infoPlay실행(java.lang.reflect.Method) throws java.lang.Exception]]>
              </value>
            </param>
          </params>
          <exception class="org.openqa.selenium.WebDriverException">
            <message>
              <![CDATA[An unknown server-side error occurred while processing the command. Original error: 'POST /element' cannot be proxied to UiAutomator2 server because the instrumentation process is not running (probably crashed). Check the server log and/or the logcat output for more details
Build info: version: '3.14.0', revision: 'aacccce0', time: '2018-08-02T20:19:58.91Z'
System info: host: 'SKT1112049PN002', ip: '172.23.174.101', os.name: 'Windows 10', os.arch: 'amd64', os.version: '10.0', java.version: '1.8.0_191'
Driver info: unit.Utilities
Capabilities {appActivity: com.skt.aidev.nugufriends.u..., appPackage: com.skt.aidev.nugufriends, automationName: UIAutomator2, chromedriverArgs: {browserName: chrome, goog:chromeOptions: {args: [], extensions: [], w3c: true}}, chromedriverExecutable: C:\chromedriver_win32\chrom..., databaseEnabled: false, desired: {appActivity: com.skt.aidev.nugufriends.u..., appPackage: com.skt.aidev.nugufriends, automationName: UIAutomator2, chromedriverArgs: {browserName: chrome, goog:chromeOptions: {args: [], extensions: [], w3c: true}}, chromedriverExecutable: C:\chromedriver_win32\chrom..., deviceName: Android, extractChromeAndroidPackageFromContextName: true, focused: true, platformName: android, recreateChromeDriverSessions: false, showChromedriverLog: true, udid: ce06171633774e37027e}, deviceApiLevel: 28, deviceManufacturer: samsung, deviceModel: SM-N950N, deviceName: ce06171633774e37027e, deviceScreenDensity: 420, deviceScreenSize: 1080x2220, deviceUDID: ce06171633774e37027e, extractChromeAndroidPackageFromContextName: true, focused: true, javascriptEnabled: true, locationContextEnabled: false, networkConnectionEnabled: true, pixelRatio: 2.625, platform: LINUX, platformName: Android, platformVersion: 9, recreateChromeDriverSessions: false, showChromedriverLog: true, statBarHeight: 63, takesScreenshot: true, udid: ce06171633774e37027e, viewportRect: {height: 2031, left: 0, top: 63, width: 1080}, warnings: {}, webStorageEnabled: false}
Session ID: 700c805b-aaed-427c-b19e-df3517d1e59a
*** Element info: {Using=id, value=closeSnackbar}]]>
            </message>
            <full-stacktrace>
              <![CDATA[org.openqa.selenium.WebDriverException: An unknown server-side error occurred while processing the command. Original error: 'POST /element' cannot be proxied to UiAutomator2 server because the instrumentation process is not running (probably crashed). Check the server log and/or the logcat output for more details
Build info: version: '3.14.0', revision: 'aacccce0', time: '2018-08-02T20:19:58.91Z'
System info: host: 'SKT1112049PN002', ip: '172.23.174.101', os.name: 'Windows 10', os.arch: 'amd64', os.version: '10.0', java.version: '1.8.0_191'
Driver info: unit.Utilities
Capabilities {appActivity: com.skt.aidev.nugufriends.u..., appPackage: com.skt.aidev.nugufriends, automationName: UIAutomator2, chromedriverArgs: {browserName: chrome, goog:chromeOptions: {args: [], extensions: [], w3c: true}}, chromedriverExecutable: C:\chromedriver_win32\chrom..., databaseEnabled: false, desired: {appActivity: com.skt.aidev.nugufriends.u..., appPackage: com.skt.aidev.nugufriends, automationName: UIAutomator2, chromedriverArgs: {browserName: chrome, goog:chromeOptions: {args: [], extensions: [], w3c: true}}, chromedriverExecutable: C:\chromedriver_win32\chrom..., deviceName: Android, extractChromeAndroidPackageFromContextName: true, focused: true, platformName: android, recreateChromeDriverSessions: false, showChromedriverLog: true, udid: ce06171633774e37027e}, deviceApiLevel: 28, deviceManufacturer: samsung, deviceModel: SM-N950N, deviceName: ce06171633774e37027e, deviceScreenDensity: 420, deviceScreenSize: 1080x2220, deviceUDID: ce06171633774e37027e, extractChromeAndroidPackageFromContextName: true, focused: true, javascriptEnabled: true, locationContextEnabled: false, networkConnectionEnabled: true, pixelRatio: 2.625, platform: LINUX, platformName: Android, platformVersion: 9, recreateChromeDriverSessions: false, showChromedriverLog: true, statBarHeight: 63, takesScreenshot: true, udid: ce06171633774e37027e, viewportRect: {height: 2031, left: 0, top: 63, width: 1080}, warnings: {}, webStorageEnabled: false}
Session ID: 700c805b-aaed-427c-b19e-df3517d1e59a
*** Element info: {Using=id, value=closeSnackbar}
at sun.reflect.NativeConstructorAccessorImpl.newInstance0(Native Method)
at sun.reflect.NativeConstructorAccessorImpl.newInstance(NativeConstructorAccessorImpl.java:62)
at sun.reflect.DelegatingConstructorAccessorImpl.newInstance(DelegatingConstructorAccessorImpl.java:45)
at java.lang.reflect.Constructor.newInstance(Constructor.java:423)
at org.openqa.selenium.remote.http.W3CHttpResponseCodec.createException(W3CHttpResponseCodec.java:187)
at org.openqa.selenium.remote.http.W3CHttpResponseCodec.decode(W3CHttpResponseCodec.java:122)
at org.openqa.selenium.remote.http.W3CHttpResponseCodec.decode(W3CHttpResponseCodec.java:49)
at org.openqa.selenium.remote.HttpCommandExecutor.execute(HttpCommandExecutor.java:158)
at io.appium.java_client.remote.AppiumCommandExecutor.execute(AppiumCommandExecutor.java:247)
at org.openqa.selenium.remote.RemoteWebDriver.execute(RemoteWebDriver.java:548)
at io.appium.java_client.DefaultGenericMobileDriver.execute(DefaultGenericMobileDriver.java:41)
at io.appium.java_client.AppiumDriver.execute(AppiumDriver.java:1)
at io.appium.java_client.android.AndroidDriver.execute(AndroidDriver.java:1)
at org.openqa.selenium.remote.RemoteWebDriver.findElement(RemoteWebDriver.java:322)
at io.appium.java_client.DefaultGenericMobileDriver.findElement(DefaultGenericMobileDriver.java:61)
at io.appium.java_client.AppiumDriver.findElement(AppiumDriver.java:1)
at io.appium.java_client.android.AndroidDriver.findElement(AndroidDriver.java:1)
at org.openqa.selenium.remote.RemoteWebDriver.findElementById(RemoteWebDriver.java:368)
at io.appium.java_client.DefaultGenericMobileDriver.findElementById(DefaultGenericMobileDriver.java:69)
at io.appium.java_client.AppiumDriver.findElementById(AppiumDriver.java:1)
at io.appium.java_client.android.AndroidDriver.findElementById(AndroidDriver.java:1)
at org.openqa.selenium.By$ById.findElement(By.java:188)
at unit.Utilities.isElementPresent(Utilities.java:912)
at Chips_001_기본기능.기본기능_03_부가기능.TC_0145_미디어재생중_infoPlay실행(기본기능_03_부가기능.java:102)
at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
at java.lang.reflect.Method.invoke(Method.java:498)
at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:133)
at org.testng.internal.TestInvoker.invokeMethod(TestInvoker.java:598)
at org.testng.internal.TestInvoker.invokeTestMethod(TestInvoker.java:173)
at org.testng.internal.MethodRunner.runInSequence(MethodRunner.java:46)
at org.testng.internal.TestInvoker$MethodInvocationAgent.invoke(TestInvoker.java:824)
at org.testng.internal.TestInvoker.invokeTestMethods(TestInvoker.java:146)
at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:146)
at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:128)
at java.util.ArrayList.forEach(ArrayList.java:1257)
at org.testng.TestRunner.privateRun(TestRunner.java:794)
at org.testng.TestRunner.run(TestRunner.java:596)
at org.testng.SuiteRunner.runTest(SuiteRunner.java:377)
at org.testng.SuiteRunner.access$000(SuiteRunner.java:28)
at org.testng.SuiteRunner$SuiteWorker.run(SuiteRunner.java:418)
at org.testng.internal.thread.ThreadUtil.lambda$execute$0(ThreadUtil.java:64)
at java.util.concurrent.FutureTask.run(FutureTask.java:266)
at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
at java.lang.Thread.run(Thread.java:748)
]]>
            </full-stacktrace>
          </exception> <!-- org.openqa.selenium.WebDriverException -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- TC_0145_미디어재생중_infoPlay실행 -->
        <test-method status="FAIL" signature="AfterMethod(org.testng.ITestResult)[pri:0, instance:Chips_001_기본기능.기본기능_03_부가기능@16aa0a0a]" name="AfterMethod" is-config="true" duration-ms="25" started-at="2021-08-02T11:44:02 KST" finished-at="2021-08-02T11:44:02 KST">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=TC_0145_미디어재생중_infoPlay실행 status=FAILURE method=기본기능_03_부가기능.TC_0145_미디어재생중_infoPlay실행(java.lang.reflect.Method)[pri:0, instance:Chips_001_기본기능.기본기능_03_부가기능@16aa0a0a] output={null}]]]>
              </value>
            </param>
          </params>
          <exception class="org.openqa.selenium.WebDriverException">
            <message>
              <![CDATA[An unknown server-side error occurred while processing the command. Original error: 'GET /screenshot' cannot be proxied to UiAutomator2 server because the instrumentation process is not running (probably crashed). Check the server log and/or the logcat output for more details
Build info: version: '3.14.0', revision: 'aacccce0', time: '2018-08-02T20:19:58.91Z'
System info: host: 'SKT1112049PN002', ip: '172.23.174.101', os.name: 'Windows 10', os.arch: 'amd64', os.version: '10.0', java.version: '1.8.0_191'
Driver info: unit.Utilities
Capabilities {appActivity: com.skt.aidev.nugufriends.u..., appPackage: com.skt.aidev.nugufriends, automationName: UIAutomator2, chromedriverArgs: {browserName: chrome, goog:chromeOptions: {args: [], extensions: [], w3c: true}}, chromedriverExecutable: C:\chromedriver_win32\chrom..., databaseEnabled: false, desired: {appActivity: com.skt.aidev.nugufriends.u..., appPackage: com.skt.aidev.nugufriends, automationName: UIAutomator2, chromedriverArgs: {browserName: chrome, goog:chromeOptions: {args: [], extensions: [], w3c: true}}, chromedriverExecutable: C:\chromedriver_win32\chrom..., deviceName: Android, extractChromeAndroidPackageFromContextName: true, focused: true, platformName: android, recreateChromeDriverSessions: false, showChromedriverLog: true, udid: ce06171633774e37027e}, deviceApiLevel: 28, deviceManufacturer: samsung, deviceModel: SM-N950N, deviceName: ce06171633774e37027e, deviceScreenDensity: 420, deviceScreenSize: 1080x2220, deviceUDID: ce06171633774e37027e, extractChromeAndroidPackageFromContextName: true, focused: true, javascriptEnabled: true, locationContextEnabled: false, networkConnectionEnabled: true, pixelRatio: 2.625, platform: LINUX, platformName: Android, platformVersion: 9, recreateChromeDriverSessions: false, showChromedriverLog: true, statBarHeight: 63, takesScreenshot: true, udid: ce06171633774e37027e, viewportRect: {height: 2031, left: 0, top: 63, width: 1080}, warnings: {}, webStorageEnabled: false}
Session ID: 700c805b-aaed-427c-b19e-df3517d1e59a]]>
            </message>
            <full-stacktrace>
              <![CDATA[org.openqa.selenium.WebDriverException: An unknown server-side error occurred while processing the command. Original error: 'GET /screenshot' cannot be proxied to UiAutomator2 server because the instrumentation process is not running (probably crashed). Check the server log and/or the logcat output for more details
Build info: version: '3.14.0', revision: 'aacccce0', time: '2018-08-02T20:19:58.91Z'
System info: host: 'SKT1112049PN002', ip: '172.23.174.101', os.name: 'Windows 10', os.arch: 'amd64', os.version: '10.0', java.version: '1.8.0_191'
Driver info: unit.Utilities
Capabilities {appActivity: com.skt.aidev.nugufriends.u..., appPackage: com.skt.aidev.nugufriends, automationName: UIAutomator2, chromedriverArgs: {browserName: chrome, goog:chromeOptions: {args: [], extensions: [], w3c: true}}, chromedriverExecutable: C:\chromedriver_win32\chrom..., databaseEnabled: false, desired: {appActivity: com.skt.aidev.nugufriends.u..., appPackage: com.skt.aidev.nugufriends, automationName: UIAutomator2, chromedriverArgs: {browserName: chrome, goog:chromeOptions: {args: [], extensions: [], w3c: true}}, chromedriverExecutable: C:\chromedriver_win32\chrom..., deviceName: Android, extractChromeAndroidPackageFromContextName: true, focused: true, platformName: android, recreateChromeDriverSessions: false, showChromedriverLog: true, udid: ce06171633774e37027e}, deviceApiLevel: 28, deviceManufacturer: samsung, deviceModel: SM-N950N, deviceName: ce06171633774e37027e, deviceScreenDensity: 420, deviceScreenSize: 1080x2220, deviceUDID: ce06171633774e37027e, extractChromeAndroidPackageFromContextName: true, focused: true, javascriptEnabled: true, locationContextEnabled: false, networkConnectionEnabled: true, pixelRatio: 2.625, platform: LINUX, platformName: Android, platformVersion: 9, recreateChromeDriverSessions: false, showChromedriverLog: true, statBarHeight: 63, takesScreenshot: true, udid: ce06171633774e37027e, viewportRect: {height: 2031, left: 0, top: 63, width: 1080}, warnings: {}, webStorageEnabled: false}
Session ID: 700c805b-aaed-427c-b19e-df3517d1e59a
at sun.reflect.NativeConstructorAccessorImpl.newInstance0(Native Method)
at sun.reflect.NativeConstructorAccessorImpl.newInstance(NativeConstructorAccessorImpl.java:62)
at sun.reflect.DelegatingConstructorAccessorImpl.newInstance(DelegatingConstructorAccessorImpl.java:45)
at java.lang.reflect.Constructor.newInstance(Constructor.java:423)
at org.openqa.selenium.remote.http.W3CHttpResponseCodec.createException(W3CHttpResponseCodec.java:187)
at org.openqa.selenium.remote.http.W3CHttpResponseCodec.decode(W3CHttpResponseCodec.java:122)
at org.openqa.selenium.remote.http.W3CHttpResponseCodec.decode(W3CHttpResponseCodec.java:49)
at org.openqa.selenium.remote.HttpCommandExecutor.execute(HttpCommandExecutor.java:158)
at io.appium.java_client.remote.AppiumCommandExecutor.execute(AppiumCommandExecutor.java:247)
at org.openqa.selenium.remote.RemoteWebDriver.execute(RemoteWebDriver.java:548)
at io.appium.java_client.DefaultGenericMobileDriver.execute(DefaultGenericMobileDriver.java:45)
at io.appium.java_client.AppiumDriver.execute(AppiumDriver.java:1)
at io.appium.java_client.android.AndroidDriver.execute(AndroidDriver.java:1)
at org.openqa.selenium.remote.RemoteWebDriver.getScreenshotAs(RemoteWebDriver.java:294)
at unit.Utilities.ErrorScreenshots(Utilities.java:1514)
at TestNG_Set.Chips_TestCase.AfterMethod(Chips_TestCase.java:113)
at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
at java.lang.reflect.Method.invoke(Method.java:498)
at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:133)
at org.testng.internal.MethodInvocationHelper.invokeMethodConsideringTimeout(MethodInvocationHelper.java:62)
at org.testng.internal.ConfigInvoker.invokeConfigurationMethod(ConfigInvoker.java:385)
at org.testng.internal.ConfigInvoker.invokeConfigurations(ConfigInvoker.java:321)
at org.testng.internal.TestInvoker.runConfigMethods(TestInvoker.java:700)
at org.testng.internal.TestInvoker.runAfterGroupsConfigurations(TestInvoker.java:676)
at org.testng.internal.TestInvoker.invokeMethod(TestInvoker.java:660)
at org.testng.internal.TestInvoker.invokeTestMethod(TestInvoker.java:173)
at org.testng.internal.MethodRunner.runInSequence(MethodRunner.java:46)
at org.testng.internal.TestInvoker$MethodInvocationAgent.invoke(TestInvoker.java:824)
at org.testng.internal.TestInvoker.invokeTestMethods(TestInvoker.java:146)
at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:146)
at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:128)
at java.util.ArrayList.forEach(ArrayList.java:1257)
at org.testng.TestRunner.privateRun(TestRunner.java:794)
at org.testng.TestRunner.run(TestRunner.java:596)
at org.testng.SuiteRunner.runTest(SuiteRunner.java:377)
at org.testng.SuiteRunner.access$000(SuiteRunner.java:28)
at org.testng.SuiteRunner$SuiteWorker.run(SuiteRunner.java:418)
at org.testng.internal.thread.ThreadUtil.lambda$execute$0(ThreadUtil.java:64)
at java.util.concurrent.FutureTask.run(FutureTask.java:266)
at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
at java.lang.Thread.run(Thread.java:748)
]]>
            </full-stacktrace>
          </exception> <!-- org.openqa.selenium.WebDriverException -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- AfterMethod -->
        <test-method status="SKIP" signature="tearDownClass(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)[pri:0, instance:Chips_001_기본기능.기본기능_03_부가기능@16aa0a0a]" name="tearDownClass" is-config="true" duration-ms="-1627872242350" started-at="2021-08-02T11:44:02 KST" finished-at="1970-01-01T09:00:00 KST">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- tearDownClass -->
      </class> <!-- Chips_001_기본기능.기본기능_03_부가기능 -->
      <class name="Chips_001_기본기능.기본기능_01_기본기능">
        <test-method status="PASS" signature="setupClass(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)[pri:0, instance:Chips_001_기본기능.기본기능_01_기본기능@3c87521]" name="setupClass" is-config="true" duration-ms="27690" started-at="2021-08-02T11:37:18 KST" finished-at="2021-08-02T11:37:46 KST">
          <params>
            <param index="0">
              <value>
                <![CDATA[Android]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[Chips]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[http://0.0.0.0:4723/wd/hub]]>
              </value>
            </param>
            <param index="3">
              <value>
                <![CDATA[RTG]]>
              </value>
            </param>
            <param index="4">
              <value>
                <![CDATA[Chips]]>
              </value>
            </param>
            <param index="5">
              <value>
                <![CDATA[in]]>
              </value>
            </param>
            <param index="6">
              <value>
                <![CDATA[ce06171633774e37027e]]>
              </value>
            </param>
            <param index="7">
              <value>
                <![CDATA[ALDF3NYA6C0D0C654DD2]]>
              </value>
            </param>
            <param index="8">
              <value>
                <![CDATA[ALDF5TR5SNGZ8175DA16]]>
              </value>
            </param>
            <param index="9">
              <value>
                <![CDATA[ALDFH3D1Q7W6071EFE41]]>
              </value>
            </param>
            <param index="10">
              <value>
                <![CDATA[ALDFHFMQC3RB935B4B02]]>
              </value>
            </param>
            <param index="11">
              <value>
                <![CDATA[ALDFHFMSG34WDF6CD40E]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setupClass -->
        <test-method status="PASS" signature="BeforeMethod(java.lang.reflect.Method)[pri:0, instance:Chips_001_기본기능.기본기능_01_기본기능@3c87521]" name="BeforeMethod" is-config="true" duration-ms="6" started-at="2021-08-02T11:37:46 KST" finished-at="2021-08-02T11:37:46 KST">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void Chips_001_기본기능.기본기능_01_기본기능.TC_0000_앱실행과AccessToken얻기(java.lang.reflect.Method) throws java.lang.Exception]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- BeforeMethod -->
        <test-method status="PASS" signature="TC_0000_앱실행과AccessToken얻기(java.lang.reflect.Method)[pri:0, instance:Chips_001_기본기능.기본기능_01_기본기능@3c87521]" name="TC_0000_앱실행과AccessToken얻기" duration-ms="60027" started-at="2021-08-02T11:37:46 KST" description="칩스 리그레이션 TC : 실행_0000" finished-at="2021-08-02T11:38:46 KST">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void Chips_001_기본기능.기본기능_01_기본기능.TC_0000_앱실행과AccessToken얻기(java.lang.reflect.Method) throws java.lang.Exception]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- TC_0000_앱실행과AccessToken얻기 -->
        <test-method status="PASS" signature="AfterMethod(org.testng.ITestResult)[pri:0, instance:Chips_001_기본기능.기본기능_01_기본기능@3c87521]" name="AfterMethod" is-config="true" duration-ms="14" started-at="2021-08-02T11:38:46 KST" finished-at="2021-08-02T11:38:46 KST">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=TC_0000_앱실행과AccessToken얻기 status=SUCCESS method=기본기능_01_기본기능.TC_0000_앱실행과AccessToken얻기(java.lang.reflect.Method)[pri:0, instance:Chips_001_기본기능.기본기능_01_기본기능@3c87521] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- AfterMethod -->
        <test-method status="PASS" signature="TC_0009_MIC버튼호출(java.lang.reflect.Method)[pri:0, instance:Chips_001_기본기능.기본기능_01_기본기능@3c87521]" name="TC_0009_MIC버튼호출" duration-ms="3610" started-at="2021-08-02T11:38:46 KST" description="칩스 리그레이션 TC : 실행_0009" finished-at="2021-08-02T11:38:49 KST">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void Chips_001_기본기능.기본기능_01_기본기능.TC_0009_MIC버튼호출(java.lang.reflect.Method) throws java.lang.Exception]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- TC_0009_MIC버튼호출 -->
        <test-method status="PASS" signature="BeforeMethod(java.lang.reflect.Method)[pri:0, instance:Chips_001_기본기능.기본기능_01_기본기능@3c87521]" name="BeforeMethod" is-config="true" duration-ms="0" started-at="2021-08-02T11:38:46 KST" finished-at="2021-08-02T11:38:46 KST">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void Chips_001_기본기능.기본기능_01_기본기능.TC_0009_MIC버튼호출(java.lang.reflect.Method) throws java.lang.Exception]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- BeforeMethod -->
        <test-method status="PASS" signature="AfterMethod(org.testng.ITestResult)[pri:0, instance:Chips_001_기본기능.기본기능_01_기본기능@3c87521]" name="AfterMethod" is-config="true" duration-ms="11" started-at="2021-08-02T11:38:49 KST" finished-at="2021-08-02T11:38:49 KST">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=TC_0009_MIC버튼호출 status=SUCCESS method=기본기능_01_기본기능.TC_0009_MIC버튼호출(java.lang.reflect.Method)[pri:0, instance:Chips_001_기본기능.기본기능_01_기본기능@3c87521] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- AfterMethod -->
        <test-method status="PASS" signature="BeforeMethod(java.lang.reflect.Method)[pri:0, instance:Chips_001_기본기능.기본기능_01_기본기능@3c87521]" name="BeforeMethod" is-config="true" duration-ms="1" started-at="2021-08-02T11:38:49 KST" finished-at="2021-08-02T11:38:49 KST">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void Chips_001_기본기능.기본기능_01_기본기능.TC_0068_베터리잔량_발화체크(java.lang.reflect.Method) throws java.lang.Exception]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- BeforeMethod -->
        <test-method status="PASS" signature="TC_0068_베터리잔량_발화체크(java.lang.reflect.Method)[pri:0, instance:Chips_001_기본기능.기본기능_01_기본기능@3c87521]" name="TC_0068_베터리잔량_발화체크" duration-ms="18372" started-at="2021-08-02T11:38:49 KST" description="칩스 리그레이션 TC : 실행_0068" finished-at="2021-08-02T11:39:08 KST">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void Chips_001_기본기능.기본기능_01_기본기능.TC_0068_베터리잔량_발화체크(java.lang.reflect.Method) throws java.lang.Exception]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- TC_0068_베터리잔량_발화체크 -->
        <test-method status="PASS" signature="AfterMethod(org.testng.ITestResult)[pri:0, instance:Chips_001_기본기능.기본기능_01_기본기능@3c87521]" name="AfterMethod" is-config="true" duration-ms="17" started-at="2021-08-02T11:39:08 KST" finished-at="2021-08-02T11:39:08 KST">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=TC_0068_베터리잔량_발화체크 status=SUCCESS method=기본기능_01_기본기능.TC_0068_베터리잔량_발화체크(java.lang.reflect.Method)[pri:0, instance:Chips_001_기본기능.기본기능_01_기본기능@3c87521] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- AfterMethod -->
        <test-method status="PASS" signature="BeforeMethod(java.lang.reflect.Method)[pri:0, instance:Chips_001_기본기능.기본기능_01_기본기능@3c87521]" name="BeforeMethod" is-config="true" duration-ms="1" started-at="2021-08-02T11:39:08 KST" finished-at="2021-08-02T11:39:08 KST">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void Chips_001_기본기능.기본기능_01_기본기능.TC_0069_베터리잔량_발화체크(java.lang.reflect.Method) throws java.lang.Exception]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- BeforeMethod -->
        <test-method status="PASS" signature="TC_0069_베터리잔량_발화체크(java.lang.reflect.Method)[pri:0, instance:Chips_001_기본기능.기본기능_01_기본기능@3c87521]" name="TC_0069_베터리잔량_발화체크" duration-ms="18395" started-at="2021-08-02T11:39:08 KST" description="칩스 리그레이션 TC : 실행_0069" finished-at="2021-08-02T11:39:26 KST">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void Chips_001_기본기능.기본기능_01_기본기능.TC_0069_베터리잔량_발화체크(java.lang.reflect.Method) throws java.lang.Exception]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- TC_0069_베터리잔량_발화체크 -->
        <test-method status="PASS" signature="AfterMethod(org.testng.ITestResult)[pri:0, instance:Chips_001_기본기능.기본기능_01_기본기능@3c87521]" name="AfterMethod" is-config="true" duration-ms="16" started-at="2021-08-02T11:39:26 KST" finished-at="2021-08-02T11:39:26 KST">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=TC_0069_베터리잔량_발화체크 status=SUCCESS method=기본기능_01_기본기능.TC_0069_베터리잔량_발화체크(java.lang.reflect.Method)[pri:0, instance:Chips_001_기본기능.기본기능_01_기본기능@3c87521] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- AfterMethod -->
        <test-method status="PASS" signature="BeforeMethod(java.lang.reflect.Method)[pri:0, instance:Chips_001_기본기능.기본기능_01_기본기능@3c87521]" name="BeforeMethod" is-config="true" duration-ms="1" started-at="2021-08-02T11:39:26 KST" finished-at="2021-08-02T11:39:26 KST">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void Chips_001_기본기능.기본기능_01_기본기능.TC_0079_전원제어_발화체크(java.lang.reflect.Method) throws java.lang.Exception]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- BeforeMethod -->
        <test-method status="PASS" signature="TC_0079_전원제어_발화체크(java.lang.reflect.Method)[pri:0, instance:Chips_001_기본기능.기본기능_01_기본기능@3c87521]" name="TC_0079_전원제어_발화체크" duration-ms="18404" started-at="2021-08-02T11:39:26 KST" description="칩스 리그레이션 TC : 실행_0079" finished-at="2021-08-02T11:39:44 KST">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void Chips_001_기본기능.기본기능_01_기본기능.TC_0079_전원제어_발화체크(java.lang.reflect.Method) throws java.lang.Exception]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- TC_0079_전원제어_발화체크 -->
        <test-method status="PASS" signature="AfterMethod(org.testng.ITestResult)[pri:0, instance:Chips_001_기본기능.기본기능_01_기본기능@3c87521]" name="AfterMethod" is-config="true" duration-ms="16" started-at="2021-08-02T11:39:44 KST" finished-at="2021-08-02T11:39:44 KST">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=TC_0079_전원제어_발화체크 status=SUCCESS method=기본기능_01_기본기능.TC_0079_전원제어_발화체크(java.lang.reflect.Method)[pri:0, instance:Chips_001_기본기능.기본기능_01_기본기능@3c87521] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- AfterMethod -->
        <test-method status="PASS" signature="BeforeMethod(java.lang.reflect.Method)[pri:0, instance:Chips_001_기본기능.기본기능_01_기본기능@3c87521]" name="BeforeMethod" is-config="true" duration-ms="0" started-at="2021-08-02T11:39:44 KST" finished-at="2021-08-02T11:39:44 KST">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void Chips_001_기본기능.기본기능_01_기본기능.TC_0091_환경설정_발화체크(java.lang.reflect.Method) throws java.lang.Exception]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- BeforeMethod -->
        <test-method status="PASS" signature="TC_0091_환경설정_발화체크(java.lang.reflect.Method)[pri:0, instance:Chips_001_기본기능.기본기능_01_기본기능@3c87521]" name="TC_0091_환경설정_발화체크" duration-ms="18567" started-at="2021-08-02T11:39:44 KST" description="칩스 리그레이션 TC : 실행_0091" finished-at="2021-08-02T11:40:03 KST">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void Chips_001_기본기능.기본기능_01_기본기능.TC_0091_환경설정_발화체크(java.lang.reflect.Method) throws java.lang.Exception]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- TC_0091_환경설정_발화체크 -->
        <test-method status="PASS" signature="AfterMethod(org.testng.ITestResult)[pri:0, instance:Chips_001_기본기능.기본기능_01_기본기능@3c87521]" name="AfterMethod" is-config="true" duration-ms="17" started-at="2021-08-02T11:40:03 KST" finished-at="2021-08-02T11:40:03 KST">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=TC_0091_환경설정_발화체크 status=SUCCESS method=기본기능_01_기본기능.TC_0091_환경설정_발화체크(java.lang.reflect.Method)[pri:0, instance:Chips_001_기본기능.기본기능_01_기본기능@3c87521] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- AfterMethod -->
        <test-method status="PASS" signature="TC_0094_미디어재생중_환경설정_발화체크(java.lang.reflect.Method)[pri:0, instance:Chips_001_기본기능.기본기능_01_기본기능@3c87521]" name="TC_0094_미디어재생중_환경설정_발화체크" duration-ms="39245" started-at="2021-08-02T11:40:03 KST" description="칩스 리그레이션 TC : 실행_0094" finished-at="2021-08-02T11:40:42 KST">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void Chips_001_기본기능.기본기능_01_기본기능.TC_0094_미디어재생중_환경설정_발화체크(java.lang.reflect.Method) throws java.lang.Exception]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- TC_0094_미디어재생중_환경설정_발화체크 -->
        <test-method status="PASS" signature="BeforeMethod(java.lang.reflect.Method)[pri:0, instance:Chips_001_기본기능.기본기능_01_기본기능@3c87521]" name="BeforeMethod" is-config="true" duration-ms="0" started-at="2021-08-02T11:40:03 KST" finished-at="2021-08-02T11:40:03 KST">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void Chips_001_기본기능.기본기능_01_기본기능.TC_0094_미디어재생중_환경설정_발화체크(java.lang.reflect.Method) throws java.lang.Exception]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- BeforeMethod -->
        <test-method status="PASS" signature="AfterMethod(org.testng.ITestResult)[pri:0, instance:Chips_001_기본기능.기본기능_01_기본기능@3c87521]" name="AfterMethod" is-config="true" duration-ms="18" started-at="2021-08-02T11:40:42 KST" finished-at="2021-08-02T11:40:42 KST">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=TC_0094_미디어재생중_환경설정_발화체크 status=SUCCESS method=기본기능_01_기본기능.TC_0094_미디어재생중_환경설정_발화체크(java.lang.reflect.Method)[pri:0, instance:Chips_001_기본기능.기본기능_01_기본기능@3c87521] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- AfterMethod -->
        <test-method status="PASS" signature="BeforeMethod(java.lang.reflect.Method)[pri:0, instance:Chips_001_기본기능.기본기능_01_기본기능@3c87521]" name="BeforeMethod" is-config="true" duration-ms="0" started-at="2021-08-02T11:40:42 KST" finished-at="2021-08-02T11:40:42 KST">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void Chips_001_기본기능.기본기능_01_기본기능.TC_0098_홈화면변경_발화체크(java.lang.reflect.Method) throws java.lang.Exception]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- BeforeMethod -->
        <test-method status="PASS" signature="TC_0098_홈화면변경_발화체크(java.lang.reflect.Method)[pri:0, instance:Chips_001_기본기능.기본기능_01_기본기능@3c87521]" name="TC_0098_홈화면변경_발화체크" duration-ms="18423" started-at="2021-08-02T11:40:42 KST" description="칩스 리그레이션 TC : 실행_0098" finished-at="2021-08-02T11:41:01 KST">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void Chips_001_기본기능.기본기능_01_기본기능.TC_0098_홈화면변경_발화체크(java.lang.reflect.Method) throws java.lang.Exception]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- TC_0098_홈화면변경_발화체크 -->
        <test-method status="PASS" signature="AfterMethod(org.testng.ITestResult)[pri:0, instance:Chips_001_기본기능.기본기능_01_기본기능@3c87521]" name="AfterMethod" is-config="true" duration-ms="16" started-at="2021-08-02T11:41:01 KST" finished-at="2021-08-02T11:41:01 KST">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=TC_0098_홈화면변경_발화체크 status=SUCCESS method=기본기능_01_기본기능.TC_0098_홈화면변경_발화체크(java.lang.reflect.Method)[pri:0, instance:Chips_001_기본기능.기본기능_01_기본기능@3c87521] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- AfterMethod -->
        <test-method status="PASS" signature="BeforeMethod(java.lang.reflect.Method)[pri:0, instance:Chips_001_기본기능.기본기능_01_기본기능@3c87521]" name="BeforeMethod" is-config="true" duration-ms="0" started-at="2021-08-02T11:41:01 KST" finished-at="2021-08-02T11:41:01 KST">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void Chips_001_기본기능.기본기능_01_기본기능.TC_0115_나이트모드_발화체크(java.lang.reflect.Method) throws java.lang.Exception]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- BeforeMethod -->
        <test-method status="PASS" signature="TC_0115_나이트모드_발화체크(java.lang.reflect.Method)[pri:0, instance:Chips_001_기본기능.기본기능_01_기본기능@3c87521]" name="TC_0115_나이트모드_발화체크" duration-ms="18458" started-at="2021-08-02T11:41:01 KST" description="칩스 리그레이션 TC : 실행_0115" finished-at="2021-08-02T11:41:19 KST">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void Chips_001_기본기능.기본기능_01_기본기능.TC_0115_나이트모드_발화체크(java.lang.reflect.Method) throws java.lang.Exception]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- TC_0115_나이트모드_발화체크 -->
        <test-method status="PASS" signature="AfterMethod(org.testng.ITestResult)[pri:0, instance:Chips_001_기본기능.기본기능_01_기본기능@3c87521]" name="AfterMethod" is-config="true" duration-ms="19" started-at="2021-08-02T11:41:19 KST" finished-at="2021-08-02T11:41:19 KST">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=TC_0115_나이트모드_발화체크 status=SUCCESS method=기본기능_01_기본기능.TC_0115_나이트모드_발화체크(java.lang.reflect.Method)[pri:0, instance:Chips_001_기본기능.기본기능_01_기본기능@3c87521] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- AfterMethod -->
        <test-method status="PASS" signature="tearDownClass(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)[pri:0, instance:Chips_001_기본기능.기본기능_01_기본기능@3c87521]" name="tearDownClass" is-config="true" duration-ms="4516" started-at="2021-08-02T11:41:19 KST" finished-at="2021-08-02T11:41:24 KST">
          <params>
            <param index="0">
              <value>
                <![CDATA[RTG]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[Chips]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[in]]>
              </value>
            </param>
            <param index="3">
              <value>
                <![CDATA[ce06171633774e37027e]]>
              </value>
            </param>
            <param index="4">
              <value>
                <![CDATA[ALDF3NYA6C0D0C654DD2]]>
              </value>
            </param>
            <param index="5">
              <value>
                <![CDATA[ALDF5TR5SNGZ8175DA16]]>
              </value>
            </param>
            <param index="6">
              <value>
                <![CDATA[ALDFH3D1Q7W6071EFE41]]>
              </value>
            </param>
            <param index="7">
              <value>
                <![CDATA[ALDFHFMQC3RB935B4B02]]>
              </value>
            </param>
            <param index="8">
              <value>
                <![CDATA[ALDFHFMSG34WDF6CD40E]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- tearDownClass -->
      </class> <!-- Chips_001_기본기능.기본기능_01_기본기능 -->
    </test> <!-- Test_Project -->
  </suite> <!-- ExtentReport -->
</testng-results>
